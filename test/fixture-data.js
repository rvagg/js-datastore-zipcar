const assert = require('assert')

const CID = require('cids')
const Block = require('@ipld/block')
const { DAGNode, DAGLink } = require('ipld-dag-pb')
const pbUtil = require('ipld-dag-pb').util

const rawBlocks = 'aaaa bbbb cccc zzzz'.split(' ').map((s) => Block.encoder(Buffer.from(s), 'raw'))
const pbBlocks = []
const cborBlocks = []
const allBlocks = [['raw', rawBlocks], ['pb', pbBlocks], ['cbor', cborBlocks]]

const acid = new CID('bafyreih34u3kglyunorqexbllnkkejmxtvrbwivtz63iaujzf5w47nbvka')

function toCBORStruct (s, i, b) {
  return { s, i, b }
}

async function toBlock (pnd) {
  const buf = pbUtil.serialize(pnd)
  const cid = await pbUtil.cid(buf, { cidVersion: 0 })
  return Block.create(buf, cid)
}

async function makeData () {
  if (!pbBlocks.length) {
    const pnd1 = new DAGNode(null, [
      new DAGLink('cat', await (rawBlocks[0].encode()).byteLength, await rawBlocks[0].cid())
    ])
    pbBlocks.push(await toBlock(pnd1))

    const pnd2 = new DAGNode(null, [
      new DAGLink('dog', await (rawBlocks[1].encode()).byteLength, await rawBlocks[1].cid()),
      new DAGLink('first', pnd1.size, await pbBlocks[0].cid())
    ])
    pbBlocks.push(await toBlock(pnd2))

    const pnd3 = new DAGNode(null, [
      new DAGLink('bear', await (rawBlocks[2].encode()).byteLength, await rawBlocks[2].cid()),
      new DAGLink('second', pnd2.size, await pbBlocks[1].cid())
    ])
    pbBlocks.push(await toBlock(pnd3))

    const cbstructs = [toCBORStruct('foo', 100, false), toCBORStruct('bar', -100, false), toCBORStruct('baz', 0, true)]
    for (const b of cbstructs) {
      cborBlocks.push(Block.encoder(b, 'dag-cbor'))
    }
  }

  return {
    rawBlocks,
    pbBlocks,
    cborBlocks,
    allBlocks
  }
}

async function verifyHas (zipDs, modified) {
  async function verifyHas (cid, name) {
    assert.ok(await zipDs.has(cid), `datastore doesn't have expected key for ${name}`)
  }

  async function verifyHasnt (cid, name) {
    assert.ok(!(await zipDs.has(cid)), `datastore has unexpected key for ${name}`)
  }

  for (const [type, blocks] of allBlocks) {
    for (let i = 0; i < 3; i++) {
      if (modified && i === 1) {
        // second of each type is removed from modified
        await verifyHasnt(await blocks[i].cid(), `block #${i} (${type} / ${await blocks[i].cid()})`)
      } else {
        await verifyHas(await blocks[i].cid(), `block #${i} (${type} / ${await blocks[i].cid()})`)
      }
    }

    if (modified && type === 'raw') {
      await verifyHas(await blocks[3].cid(), `block #3 (${type})`) // zzzz
    }
  }

  // not a block we have
  await verifyHasnt(await Block.encoder(Buffer.from('dddd'), 'raw').cid(), 'dddd')
}

function compareBlockData (actual, expected, id) {
  assert.strictEqual(Buffer.from(actual).toString('hex'), Buffer.from(expected).toString('hex'), `comparing block as hex ${id}`)
}

async function verifyBlocks (zipDs, modified) {
  async function verifyBlock (block, index, type) {
    const expected = await block.encode()
    let actual
    try {
      actual = await zipDs.get(await block.cid())
    } catch (err) {
      assert.ifError(err, `get block length #${index} (${type})`)
    }
    compareBlockData(actual, expected, `#${index} (${type})`)
  }

  for (const [type, blocks] of allBlocks) {
    for (let i = 0; i < 3; i++) {
      const block = blocks[i]

      if (modified && i === 1) {
        await assert.rejects(zipDs.get(await block.cid()), {
          name: 'Error',
          message: 'Not Found'
        })
        continue
      }

      await verifyBlock(block, i, type)
    }

    if (modified && type === 'raw') {
      await verifyBlock(blocks[3], 3, type) // zzzz
    }
  }
}

async function verifyRoots (zipDs, modified) {
  const expected = await cborBlocks[modified ? 1 : 2].cid()
  assert.deepStrictEqual(await zipDs.getRoots(), [expected])
}

module.exports.makeData = makeData
module.exports.verifyBlocks = verifyBlocks
module.exports.verifyHas = verifyHas
module.exports.verifyRoots = verifyRoots
module.exports.acid = acid
module.exports.compareBlockData = compareBlockData

module.exports.zcar = Buffer.from('504b030414000800080005750d4f0000000000000000000000003b0009006261666b7265696462787a6b327279787777747178656d346c337879796a7677333579753474636374346371657178776f34377a6878677871777155540500012a3f525d4a4c4c4c04040000ffff504b070845e598ad0a00000004000000504b030414000800080005750d4f0000000000000000000000003b0009006261666b72656965627a726e726f616d676f733261646e627067773561706f337a3469697368686264783737676c646e626b353764347a64696f3455540500012a3f525d4a4a4a4a02040000ffff504b07088bf64f0f0a00000004000000504b030414000800080005750d4f0000000000000000000000003b0009006261666b726569667737706c686c366d6f666b36736676686e66683634716d6b7137336f6571776c36736c6f727536726568616f756a6974756b6555540500012a3f525d4a4e4e4e06040000ffff504b07080efa2dd80a00000004000000504b030414000800080005750d4f0000000000000000000000002e000900516d57585a78565139795a666851784c443335654452384c694d527359744878597154464342624a6f694a56797355540500012a3f525d005e00a1ff122d0a240155122081cc5b17018674b401b42f35ba07bb79e211239c23bffe658da1577e3e6468771203646f671804122d0a221220e7dc486e97e6ebe5cdabab3e392bdad128b6e09acc94bb4e2aa2af7b986d24d0120566697273741833010000ffff504b0708c1c14653680000005e000000504b030414000800080005750d4f0000000000000000000000002e000900516d4e58365466666176737961347867426932564a516e53757179394773786f6e67785a5a39755a42717031366455540500012a3f525d0061009eff122e0a2401551220b6fbd675f98e2abd22d4ed29fdc83150fedc48597e92dd1a7a24381d44a274511204626561721804122f0a22122079a982de3c9907953d4d323cee1d0fb1ed8f45f8ef02870c0cb9e09246bd530a12067365636f6e64189501010000ffff504b070874a549e06b00000061000000504b030414000800080005750d4f0000000000000000000000003b0009006261667972656962637062356572623472337a6668777536686279627437786d667a69787133793762756875686365673466746d693676746a786555540500012a3f525d5a9c98f42531532225b138392d3f1f100000ffff504b07086396e2f4140000000e000000504b030414000800080005750d4f0000000000000000000000003b0009006261667972656964656f7278746a6d706f7a77696634796e363778326e347670366e34337a77636d6c326d667567796a796e6a7778746c356b743455540500012a3f525d5a9c98f42531d32239b1383929b108100000ffff504b07083023bf32140000000e000000504b030414000800080005750d4f0000000000000000000000003b0009006261667972656968333475336b676c79756e6f72716578626c6c6e6b6b656a6d7874767262776976747a36336961756a7a66357734376e62766b6155540500012a3f525d5a9c98f435319321b1383929b10a100000ffff504b07081de110bb130000000d000000504b030414000800080005750d4f0000000000000000000000002e000900516d64776a687870787a634d7352337155756a3776554c38706241374d675233474178576932474c486a734b435455540500012a3f525d12d2e552610c155248dc17bae2d1b72d0f8b8cbbef7e6cb976fb9de6c98ee0070b3ce2ce3dff543debc31621e6e4c412091640000000ffff504b07083f81e6a0380000002f000000504b0102140014000800080005750d4f45e598ad0a000000040000003b00090000000000000000000000000000006261666b7265696462787a6b327279787777747178656d346c337879796a7677333579753474636374346371657178776f34377a6878677871777155540500012a3f525d504b0102140014000800080005750d4f8bf64f0f0a000000040000003b000900000000000000000000007c0000006261666b72656965627a726e726f616d676f733261646e627067773561706f337a3469697368686264783737676c646e626b353764347a64696f3455540500012a3f525d504b0102140014000800080005750d4f0efa2dd80a000000040000003b00090000000000000000000000f80000006261666b726569667737706c686c366d6f666b36736676686e66683634716d6b7137336f6571776c36736c6f727536726568616f756a6974756b6555540500012a3f525d504b0102140014000800080005750d4fc1c14653680000005e0000002e0009000000000000000000000074010000516d57585a78565139795a666851784c443335654452384c694d527359744878597154464342624a6f694a56797355540500012a3f525d504b0102140014000800080005750d4f74a549e06b000000610000002e0009000000000000000000000041020000516d4e58365466666176737961347867426932564a516e53757179394773786f6e67785a5a39755a42717031366455540500012a3f525d504b0102140014000800080005750d4f6396e2f4140000000e0000003b00090000000000000000000000110300006261667972656962637062356572623472337a6668777536686279627437786d667a69787133793762756875686365673466746d693676746a786555540500012a3f525d504b0102140014000800080005750d4f3023bf32140000000e0000003b00090000000000000000000000970300006261667972656964656f7278746a6d706f7a77696634796e363778326e347670366e34337a77636d6c326d667567796a796e6a7778746c356b743455540500012a3f525d504b0102140014000800080005750d4f1de110bb130000000d0000003b000900000000000000000000001d0400006261667972656968333475336b676c79756e6f72716578626c6c6e6b6b656a6d7874767262776976747a36336961756a7a66357734376e62766b6155540500012a3f525d504b0102140014000800080005750d4f3f81e6a0380000002f0000002e00090000000000000000000000a2040000516d64776a687870787a634d7352337155756a3776554c38706241374d675233474178576932474c486a734b435455540500012a3f525d504b05060000000009000900db0300003f0500003b006261667972656968333475336b676c79756e6f72716578626c6c6e6b6b656a6d7874767262776976747a36336961756a7a66357734376e62766b61', 'hex')
